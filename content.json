{"meta":{"title":"Enjoy Life","subtitle":null,"description":null,"author":"Herbert Zhang","url":"https://herbertzhang1989.github.io"},"pages":[{"title":"About","date":"2017-08-24T09:03:25.396Z","updated":"2017-08-24T01:21:57.485Z","comments":true,"path":"about/index.html","permalink":"https://herbertzhang1989.github.io/about/index.html","excerpt":"","text":""},{"title":"ambari","date":"2018-04-10T00:39:18.000Z","updated":"2018-04-10T00:44:43.053Z","comments":false,"path":"tags/index.html","permalink":"https://herbertzhang1989.github.io/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-08-24T09:07:06.629Z","updated":"2017-08-24T01:21:57.485Z","comments":true,"path":"categories/index.html","permalink":"https://herbertzhang1989.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"OpenStack API 汇总","slug":"openstack-api","date":"2018-04-19T01:00:51.783Z","updated":"2018-04-19T01:04:59.026Z","comments":true,"path":"2018/04/19/openstack-api/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/19/openstack-api/","excerpt":"","text":"1、OpenStack 简介OpenStack 这个词不是指单个应用程序。它是一个服务集合，这些服务协同工作来实现 IaaS 云。每个 OpenStack 服务都有一个正式名称和一个代号，如下表所示，而且每个 OpenStack 服务公开了自己的 Python API。 正式名称 代号 Identity Service keystone Image Service glance Compute Service nova Networking Service quantum Block Storage Service cinder Object Storage Service swift 2、tenant/projectOpenstack 中, 以租户作为云主机隔离的单位 project 等同于 tenant OpenStack Compute Service (nova) 作为认证时候, 称为 project OpenStack Identity Service (keystone) 作为认证时候, 称为 tenant 在管理 openstack 时候, 需要添加独立的 project, 然后每个 project 具有独立的用户, 网络, 云主机。 ketstone命令详解： 1、查看帮助： 123456789keystone 命令帮助 tenant-create Create new tenant. tenant-delete Delete tenant. tenant-get Display tenant details. tenant-list List all tenants. tenant-update Update tenant name, description, enabled status. bootstrap Grants a new role to a new user on a new tenant, after --os-tenant-name &lt;auth-tenant-name&gt; --os-tenant-id &lt;tenant-id&gt; 2、列出tenant： 12345678910111213141516171819keystone tenant-list +----------------------------------+----------+---------+ | id | name | enabled | +----------------------------------+----------+---------+ | e3a71a59840c4e88b8740b789c3afb9c | admin | True | | fa30a4cd2eba46f0b58d591b7335d660 | alt_demo | True | | 9467f30b8bba4770a06a687e4584636b | cloud | True | | 87c63116e3b4440eaa9640494b53cd43 | demo | True | | bc95edec7a674bb8873d067d9ddedaec | services | True | +----------------------------------+----------+---------+ 3、添加 tenant： 123456789keystone tenant-create --name cloud +-------------+----------------------------------+ | Property | Value | +-------------+----------------------------------+ | description | | | enabled | True | | id | 9467f30b8bba4770a06a687e4584636b | &lt;- 创建后, 使用 keystone tenant-get cloud 能够重新调回信息 | name | cloud | +-------------+----------------------------------+ 4、更新信息 1keystone tenant-update --description=&quot;use for test.&quot; --enabled=true cloud 5、删除tenant 1keystone tenant-delete 9467f30b8bba4770a06a687e4584636b 3、keystone1234567891011from keystoneauth1 import loadingfrom keystoneauth1 import sessionfrom novaclient import clientloader = loading.get_plugin_loader(&apos;password&apos;)auth = loader.load_from_options(auth_url=&apos;http://*.*.*.*:5000&apos;, username=&apos;admin&apos;, password=&apos;****&apos;, project_name=&apos;admin&apos;)sess = session.Session(auth=auth)nova = client.Client(&apos;2&apos;, session=sess)nova.servers.list() 4、glanceOpenStack Image (glance) Python API 在执行初始身份验证时与 Compute API 有一些细微的差别。glance API 依赖于必须从 keystone API 获取的信息： 123456789import keystoneclient.v2_0.client as ksclientimport glanceclient.v2.client as glclientkeystone = ksclient.Client(auth_url=&quot;http://*.*.*.*:5000/v2.0&quot;, username=&quot;admin&quot;, password=&quot;****&quot;, tenant_name=&quot;admin&quot;)glance_endpoint = keystone.service_catalog.url_for(service_type=&apos;image&apos;, endpoint_type=&apos;publicURL&apos;)glance = glclient.Client(glance_endpoint, token=keystone.auth_token)images = glance.images.list() 5、openstacksdk123456789101112131415161718192021222324252627282930313233343536373839404142434445from openstack import connection#v2.xconn = connection.Connection(auth_url=&quot;http://*.*.*.*:5000/v2&quot;, project_name=&quot;admin&quot;, username=&quot;admin&quot;, password=&quot;****&quot;)#v3conn = connection.Connection(auth_url=&quot;http://*.*.*.*:5000/v3&quot;, project_name=&quot;admin&quot;, user_domain_name=&quot;default&quot;, project_domain_name=&quot;default&quot;, username=&quot;admin&quot;, password=&quot;****&quot;) #availability_zones&gt;&gt;&gt; for i in conn.compute.availability_zones():... print i... openstack.compute.v2.availability_zone.AvailabilityZone(zoneState=&#123;u&apos;available&apos;: True&#125;, hosts=None, zoneName=cai)openstack.compute.v2.availability_zone.AvailabilityZone(zoneState=&#123;u&apos;available&apos;: True&#125;, hosts=None, zoneName=nova)#flavors&gt;&gt;&gt; for i in conn.compute.flavors():... print i.name... compute-8-8-60Gm1.smallmicro-1_512Mm1.mediumcompute-8_8Gstandard-4_8G#images&gt;&gt;&gt; for i in conn.image.images():... print i.name...Centos-6.5-20G-cephwindows-server-2012-cephCentos6.3-10G#networks&gt;&gt;&gt; for i in conn.network.networks():... print i... openstack.network.v2.network.Network(status=ACTIVE, subnets=[u&apos;3513e3b3-98cc-4c5c-8365-43d1dc532cfd&apos;], name=cf-network, provider:physical_network=None, router:external=False, admin_state_up=True, provider:network_type=gre, shared=False, id=0bb4ff64-4413-41a9-9c3b-b93d7b6f6db1, provider:segmentation_id=4)openstack.network.v2.network.Network(status=ACTIVE, subnets=[u&apos;51079dcc-4fd1-40b4-bf54-cf1b1de8e7c3&apos;], name=network-jszh2, provider:physical_network=None, router:external=False, admin_state_up=True, provider:network_type=gre, shared=False, id=857ecef3-c32b-4205-a9f8-b3bb7876e5b4, provider:segmentation_id=5)","categories":[],"tags":[{"name":"openstack","slug":"openstack","permalink":"https://herbertzhang1989.github.io/tags/openstack/"}]},{"title":"make sure your installation medium is available","slug":"suse-pxe","date":"2018-04-18T07:19:45.943Z","updated":"2018-04-18T07:33:06.150Z","comments":true,"path":"2018/04/18/suse-pxe/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/18/suse-pxe/","excerpt":"","text":"问题描述1当使用PXE安装suse操作系统时，遇到:make sure your installation medium is available.... 原因分析1231、没有dhcp服务2、dhcp服务配置错误3、有多个dhcp服务","categories":[],"tags":[{"name":"suse","slug":"suse","permalink":"https://herbertzhang1989.github.io/tags/suse/"},{"name":"pxe","slug":"pxe","permalink":"https://herbertzhang1989.github.io/tags/pxe/"}]},{"title":"固定CentOS网卡名称为eth0-n","slug":"network-eth0","date":"2018-04-11T07:39:13.980Z","updated":"2018-04-12T00:16:23.488Z","comments":true,"path":"2018/04/11/network-eth0/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/11/network-eth0/","excerpt":"","text":"1、查看当前网卡名称1ip a 2、修改对应网卡名称文件中的‘NAME’和‘DEVICE’的值1sed -i &apos;s/ens160/eth0/g&apos; /etc/sysconfig/network-scripts/ifcfg-ens160 3、修改对应网卡名称的文件名1mv /etc/sysconfig/network-scripts/ifcfg-ens160 /etc/sysconfig/network-scripts/ifcfg-eth0 4、修改/etc/sysconfig/grub文件123GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;TO:GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot; 5、执行以下命令1grub2-mkconfig -o /boot/grub2/grub.cfg 6、重启机器1reboot","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"https://herbertzhang1989.github.io/tags/centos/"}]},{"title":"spec.identity.hostName wrong","slug":"hostname","date":"2018-04-11T07:39:13.980Z","updated":"2018-04-13T08:54:29.307Z","comments":true,"path":"2018/04/11/hostname/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/11/hostname/","excerpt":"","text":"一、问题描述：使用terraform创建vsphere虚机是报错spec.identity.hostName二、原因分析：主机名称中不能使用123456789规则：主机名只允许包含ascii字符里的数字0-9，字母a-zA-Z，连字符-。其他都不允许。例如，不允许出现其他标点符号，不允许空格，不允许下划线，不允许中文字符。主机名的开头和结尾字符不允许是连字符。主机名强烈建议不要用数字开头，尽管这一条不是强制的。甚至不要使用只包含可解释为16进制字符的字符串，例如&quot;beef&quot;。建议不要使用计算机领域的特殊的词汇，例如，up。给主机命名通常不考虑字母大小写问题，并且只用小写字母而不用大写字母。给主机命名，建议使用合法的单词，这样方便记忆。因为主机名是在一个domain的范围内唯一即可，通常不必担心重复问题。转自：https://blog.csdn.net/wanghuiict/article/details/70038140","categories":[],"tags":[{"name":"terraform","slug":"terraform","permalink":"https://herbertzhang1989.github.io/tags/terraform/"},{"name":"vsphere","slug":"vsphere","permalink":"https://herbertzhang1989.github.io/tags/vsphere/"}]},{"title":"Ambari","slug":"ambari_question_1","date":"2018-04-10T00:01:36.169Z","updated":"2018-04-12T03:22:08.646Z","comments":true,"path":"2018/04/10/ambari_question_1/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/10/ambari_question_1/","excerpt":"","text":"一、问题描述：10 Nov 2017 02:13:22,688 ERROR [qtp-ambari-client-110] AbstractResourceProvider:280 - Caught AmbariException when creating a resourceorg.apache.ambari.server.HostNotFoundException: Host not found, hostname= 二、问题原因：The configured Jetty qtp-ambari-agent thread pool value of 25 is not sufficient on a host with 112 processors. Increasing the value to 48.Jetty is configuring qtp-ambari-agent with 28 reserved acceptors/selectors and a total pool size of 48 for 112 processors. 如果服务器的CPU数量超过Jetty线程数量，Ambari Server将不会响应HTTP连接 三、解决方案：1.查询cpu核数：1nproc 2.修改配置文件：/etc/ambari-server/conf/ambari.properties12client.threadpool.size.max=&lt;number of cores&gt;agent.threadpool.size.max=&lt;number of cores&gt; 3.重启amabri-server：1amabri-server restart","categories":[],"tags":[{"name":"ambari","slug":"ambari","permalink":"https://herbertzhang1989.github.io/tags/ambari/"}]},{"title":"RAID自动化","slug":"autoraid","date":"2018-04-09T07:45:15.686Z","updated":"2018-04-11T07:54:31.106Z","comments":true,"path":"2018/04/09/autoraid/","link":"","permalink":"https://herbertzhang1989.github.io/2018/04/09/autoraid/","excerpt":"","text":"一、简介：​ 构成RAID的方式通常有两种，第一类是软件RAID，通常是通过操作系统中自带的RAID功能来实现，但是软件RAID涉及到复杂的计算，需要占用CPU、内存等大量的系统资源。而且，本身RAID程序运行于操作系统上，也就是说，必须在安装操作系统之上才能组建RAID组，而安装操作系统的磁盘就无法加入RAID组了。一旦操作系统崩溃，RAID程序也就无法运行，对整个RAID组的数据安全都带来一定的隐患，因此，相对于软件RAID，更加常见的，其实是硬件RAID模式。 ​ RAID卡就是用独立的硬件板卡来实现RAID功能的办法，一块自带CPU的RAID卡俨然就是一个小型的计算机系统，有自己的CPU、内存、ROM、总线和IO接口，不过这个系统内的微型计算机专门用于处理RAID运算。 ​ SAS(Serial Attached SCSI)即串行连接SCSI，是新一代的SCSI技术，和现在流行的Serial ATA(SATA)硬盘相同，都是采用串行技术以获得更高的传输速度，并通过缩短连结线改善内部空间等。SAS是并行SCSI接口之后开发出的全新接口。此接口的设计是为了改善存储系统的效能、可用性和扩充性，并且提供与SATA硬盘的兼容性。 ​ 长期以来，RAID卡市场一直是LSI、Adaptec、Highpoint、Promise等厂商“跑马遛弯”的专区，LSI和Adaptec继承了在SCSI RAID控制器市场的优势，随着SAS时代的到来，在SAS RAID市场同样统领风骚。 ​ Adaptec正在将它的RAID(独立磁盘冗余阵列)通道存储业务以3400万美元的价格出售给PMC-Sierra，如果交易顺利完成，Adaptec的RAID卡产品线则将划入PMC旗下。 转自：[IT168存储频道] 二、adaptec使用arcconf工具： 1、查看基本信息： 1arcconf getconfig 1 AL 2、获取所有的逻辑设备信息 1arcconf getconfig 1 LD 3、获取具体channel与PD对应信息 1arcconf getconfig 1 AL | grep -i &quot;Reported channel&quot; 4、删除逻辑设备 1arcconf DELETE 1 LOGICALDRIVE 1 5、创建逻辑设备 1arcconf CREATE 1 LOGICALDRIVE name LD1 stripesize 256 name Volume_1 priority high method quick MAX 5 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 三、LSI使用storcli工具： 1、查看基本信息： 1storcli show 2、获取具体drivers与PD对应信息 1storcli /c0/eall/sall show 3、获取所有的逻辑设备 1storcli /c0/vall show 4、删除逻辑设备 1storcli /c0/v2 del 5、创建逻辑设备 1storcli /c0 add vd type=r1 size=all drives=16:0,16:1","categories":[],"tags":[{"name":"raid","slug":"raid","permalink":"https://herbertzhang1989.github.io/tags/raid/"},{"name":"arcconf","slug":"arcconf","permalink":"https://herbertzhang1989.github.io/tags/arcconf/"},{"name":"storcli","slug":"storcli","permalink":"https://herbertzhang1989.github.io/tags/storcli/"}]},{"title":"Ansible","slug":"Ansible","date":"2017-08-24T08:42:46.913Z","updated":"2018-04-11T08:03:36.412Z","comments":true,"path":"2017/08/24/Ansible/","link":"","permalink":"https://herbertzhang1989.github.io/2017/08/24/Ansible/","excerpt":"","text":"一、忽略错误信息 方式一 123tasks: - name: run this command and ignore the result shell: /usr/bin/somecommand || /bin/true 方式二 1234tasks: - name: run this command and ignore the result shell: /usr/bin/somecommand ignore_errors: True 二、Handlers: 在发生改变时执行的操作 Handlers 是由通知者进行 notify, 如果没有被 notify,handlers 不会执行.不管有多少个通知者进行了 notify,等到 play 中的所有 task 执行完成之后,handlers 也只会被执行一次. 12345678910- name: template configuration file template: src=template.j2 dest=/etc/foo.conf notify: - restart memcached - restart apachehandlers: - name: restart memcached service: name=memcached state=restarted - name: restart apache service: name=apache state=restarted 立即执行所有的 handler 命令 1234tasks: - shell: some tasks go here - meta: flush_handlers - shell: some other tasks 三、变量 合法变量名：变量名可以为字母,数字以及下划线.变量始终应该以字母开头 在Inventory中定义变量 主机变量 123456[host]host1 http_port=80 maxRequestsPerChild=808host2 http_port=303 maxRequestsPerChild=909``` 组的变量 [host]host1host2 [host:vars]ntp_server=ntp.atlanta.example.comproxy=proxy.atlanta.example.com1- 在playbook中定义变量 hosts: webserversvars: http_port: 801- 使用Facts获取的信息,使用以下命令可以查看指定主机的系统信息 ansible hostname -m setup1234返回值如下：![返回值](css/images/t2.jpg)使用方式： 访问本机：访问其它主机：1关闭Facts： hosts: whatevergather_facts: no 1- 注册变量：一般用于记录执行结果 name: test playhosts: all tasks: - shell: cat /etc/motd register: motd_contents - shell: echo &quot;motd contains the word hi&quot; when: motd_contents.stdout.find(&apos;hi&apos;) != -1 1- 变量文件分割：可以保证你共享playbook源码时隔离敏感数据的风险 hosts: allremote_user: rootvars: favcolor: bluevars_files: /vars/external_vars.yml tasks: name: this is just a placeholdercommand: /bin/echo foo1/vars/external_vars.yml in the above example, this would be vars/external_vars.ymlsomevar: somevaluepassword: magic1- 命令行中传递变量 hosts: ‘‘remote_user: ‘‘ tasks: … ansible-playbook release.yml –extra-vars “hosts=vipers user=starbuck”``` 变量的优先级 extra vars (在命令行中使用 -e)优先级最高 然后是在inventory中定义的连接变量(比如ansible_ssh_user) 接着是大多数的其它变量(命令行转换,play中的变量,included的变量,role中的变量等) 然后是在inventory定义的其它变量 然后是由系统发现的facts 然后是 “role默认变量”, 这个是最默认的值,很容易丧失优先权","categories":[],"tags":[{"name":"ansbile","slug":"ansbile","permalink":"https://herbertzhang1989.github.io/tags/ansbile/"}]}]}